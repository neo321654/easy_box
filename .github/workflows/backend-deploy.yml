name: Deploy Backend from Scratch

on:
  push:
    branches:
      - main
    paths:
      - 'easy_box_backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./easy_box_backend
          push: true
          tags: 321654neo/easy_box_backend:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            
            # Phase 1: Server Cleanup
            echo "### Phase 1: Cleaning server..."
            # Stop any running containers from the project to release locks
            if [ -d "easy_box/easy_box_backend" ]; then
              cd easy_box/easy_box_backend
              docker-compose -f docker-compose.prod.yml down --volumes || echo "No containers were running."
              cd ~
            fi
            
            # Remove old project directory
            echo "Removing old project directory..."
            rm -rf easy_box
            
            # Prune all docker resources
            echo "Pruning Docker system..."
            docker system prune -af

            # Phase 2: Fresh Setup
            echo "### Phase 2: Setting up fresh project..."
            # Clone the repository fresh
            git clone https://github.com/${{ github.repository }}.git easy_box
            cd easy_box/easy_box_backend

            # Create the .env file from secrets
            echo "Creating .env file..."
            cat <<EOF > .env
            DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
            EOF

            # Phase 3: First Deployment
            echo "### Phase 3: Starting services..."
            # Pull the latest backend image
            docker pull 321654neo/easy_box_backend:latest
            
            # Start all services
            docker-compose -f docker-compose.prod.yml --env-file .env up -d --remove-orphans

            # Wait for services to stabilize
            echo "Waiting for services to start..."
            sleep 15

            # Run database migrations
            echo "Running migrations..."
            docker-compose -f docker-compose.prod.yml --env-file .env exec -T backend python manage.py migrate --noinput

            echo "### Deployment finished successfully!"

      - name: Clean up old Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker image prune -af

      - name: Send Telegram message on success
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ Deployment Successful!
            Project: easy_box_backend
            Branch: ${{ github.ref_name }}
            Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

      - name: Send Telegram message on failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ Deployment Failed!
            Project: easy_box_backend
            Branch: ${{ github.ref_name }}
            Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}